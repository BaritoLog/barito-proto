// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/producer.proto

package producer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Timber struct {
	Context              *TimberContext  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp            string          `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Content              *_struct.Struct `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Timber) Reset()         { *m = Timber{} }
func (m *Timber) String() string { return proto.CompactTextString(m) }
func (*Timber) ProtoMessage()    {}
func (*Timber) Descriptor() ([]byte, []int) {
	return fileDescriptor_03c92f9c6be1c5ba, []int{0}
}

func (m *Timber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timber.Unmarshal(m, b)
}
func (m *Timber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timber.Marshal(b, m, deterministic)
}
func (m *Timber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timber.Merge(m, src)
}
func (m *Timber) XXX_Size() int {
	return xxx_messageInfo_Timber.Size(m)
}
func (m *Timber) XXX_DiscardUnknown() {
	xxx_messageInfo_Timber.DiscardUnknown(m)
}

var xxx_messageInfo_Timber proto.InternalMessageInfo

func (m *Timber) GetContext() *TimberContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Timber) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Timber) GetContent() *_struct.Struct {
	if m != nil {
		return m.Content
	}
	return nil
}

type TimberCollection struct {
	Context              *TimberContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Items                []*Timber      `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TimberCollection) Reset()         { *m = TimberCollection{} }
func (m *TimberCollection) String() string { return proto.CompactTextString(m) }
func (*TimberCollection) ProtoMessage()    {}
func (*TimberCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_03c92f9c6be1c5ba, []int{1}
}

func (m *TimberCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimberCollection.Unmarshal(m, b)
}
func (m *TimberCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimberCollection.Marshal(b, m, deterministic)
}
func (m *TimberCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimberCollection.Merge(m, src)
}
func (m *TimberCollection) XXX_Size() int {
	return xxx_messageInfo_TimberCollection.Size(m)
}
func (m *TimberCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_TimberCollection.DiscardUnknown(m)
}

var xxx_messageInfo_TimberCollection proto.InternalMessageInfo

func (m *TimberCollection) GetContext() *TimberContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *TimberCollection) GetItems() []*Timber {
	if m != nil {
		return m.Items
	}
	return nil
}

type TimberContext struct {
	KafkaTopic             string   `protobuf:"bytes,1,opt,name=kafka_topic,json=kafkaTopic,proto3" json:"kafka_topic,omitempty"`
	KafkaPartition         int32    `protobuf:"varint,2,opt,name=kafka_partition,json=kafkaPartition,proto3" json:"kafka_partition,omitempty"`
	KafkaReplicationFactor int32    `protobuf:"varint,3,opt,name=kafka_replication_factor,json=kafkaReplicationFactor,proto3" json:"kafka_replication_factor,omitempty"`
	EsIndexPrefix          string   `protobuf:"bytes,4,opt,name=es_index_prefix,json=esIndexPrefix,proto3" json:"es_index_prefix,omitempty"`
	EsDocumentType         string   `protobuf:"bytes,5,opt,name=es_document_type,json=esDocumentType,proto3" json:"es_document_type,omitempty"`
	AppMaxTps              int32    `protobuf:"varint,6,opt,name=app_max_tps,json=appMaxTps,proto3" json:"app_max_tps,omitempty"`
	AppSecret              string   `protobuf:"bytes,7,opt,name=app_secret,json=appSecret,proto3" json:"app_secret,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *TimberContext) Reset()         { *m = TimberContext{} }
func (m *TimberContext) String() string { return proto.CompactTextString(m) }
func (*TimberContext) ProtoMessage()    {}
func (*TimberContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_03c92f9c6be1c5ba, []int{2}
}

func (m *TimberContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimberContext.Unmarshal(m, b)
}
func (m *TimberContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimberContext.Marshal(b, m, deterministic)
}
func (m *TimberContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimberContext.Merge(m, src)
}
func (m *TimberContext) XXX_Size() int {
	return xxx_messageInfo_TimberContext.Size(m)
}
func (m *TimberContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TimberContext.DiscardUnknown(m)
}

var xxx_messageInfo_TimberContext proto.InternalMessageInfo

func (m *TimberContext) GetKafkaTopic() string {
	if m != nil {
		return m.KafkaTopic
	}
	return ""
}

func (m *TimberContext) GetKafkaPartition() int32 {
	if m != nil {
		return m.KafkaPartition
	}
	return 0
}

func (m *TimberContext) GetKafkaReplicationFactor() int32 {
	if m != nil {
		return m.KafkaReplicationFactor
	}
	return 0
}

func (m *TimberContext) GetEsIndexPrefix() string {
	if m != nil {
		return m.EsIndexPrefix
	}
	return ""
}

func (m *TimberContext) GetEsDocumentType() string {
	if m != nil {
		return m.EsDocumentType
	}
	return ""
}

func (m *TimberContext) GetAppMaxTps() int32 {
	if m != nil {
		return m.AppMaxTps
	}
	return 0
}

func (m *TimberContext) GetAppSecret() string {
	if m != nil {
		return m.AppSecret
	}
	return ""
}

type ProduceResult struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceResult) Reset()         { *m = ProduceResult{} }
func (m *ProduceResult) String() string { return proto.CompactTextString(m) }
func (*ProduceResult) ProtoMessage()    {}
func (*ProduceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_03c92f9c6be1c5ba, []int{3}
}

func (m *ProduceResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceResult.Unmarshal(m, b)
}
func (m *ProduceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceResult.Marshal(b, m, deterministic)
}
func (m *ProduceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceResult.Merge(m, src)
}
func (m *ProduceResult) XXX_Size() int {
	return xxx_messageInfo_ProduceResult.Size(m)
}
func (m *ProduceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceResult.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceResult proto.InternalMessageInfo

func (m *ProduceResult) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterType((*Timber)(nil), "producer.Timber")
	proto.RegisterType((*TimberCollection)(nil), "producer.TimberCollection")
	proto.RegisterType((*TimberContext)(nil), "producer.TimberContext")
	proto.RegisterType((*ProduceResult)(nil), "producer.ProduceResult")
}

func init() { proto.RegisterFile("proto/producer.proto", fileDescriptor_03c92f9c6be1c5ba) }

var fileDescriptor_03c92f9c6be1c5ba = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x53, 0x92, 0x34, 0x13, 0x92, 0x46, 0x4b, 0x05, 0x26, 0x2a, 0x10, 0x59, 0xa2, 0x44,
	0x39, 0x24, 0x22, 0x5c, 0x50, 0x8f, 0x14, 0x21, 0x71, 0x40, 0x8a, 0xdc, 0x9c, 0xb1, 0x36, 0x9b,
	0x49, 0x59, 0xd5, 0xf6, 0xae, 0x76, 0xc7, 0x92, 0x7b, 0xe5, 0xcc, 0x8d, 0x5f, 0xe0, 0xce, 0xc7,
	0xf0, 0x0b, 0x7c, 0x08, 0xf2, 0xae, 0x9d, 0xb6, 0x54, 0x5c, 0xb8, 0x79, 0xde, 0x7b, 0x7e, 0xf3,
	0x76, 0x66, 0x17, 0x8e, 0xb5, 0x51, 0xa4, 0x16, 0xda, 0xa8, 0x6d, 0x21, 0xd0, 0xcc, 0x5d, 0xc9,
	0x0e, 0x9b, 0x7a, 0x7c, 0x72, 0xa9, 0xd4, 0x65, 0x8a, 0x0b, 0xae, 0xe5, 0x82, 0xe7, 0xb9, 0x22,
	0x4e, 0x52, 0xe5, 0xd6, 0xeb, 0xf6, 0xac, 0xab, 0x36, 0xc5, 0x6e, 0x61, 0xc9, 0x14, 0x82, 0x3c,
	0x1b, 0x7d, 0x0b, 0xa0, 0xb3, 0x96, 0xd9, 0x06, 0x0d, 0x7b, 0x0d, 0x5d, 0xa1, 0x72, 0xc2, 0x92,
	0xc2, 0x60, 0x12, 0x4c, 0xfb, 0xcb, 0x27, 0xf3, 0x7d, 0x4b, 0x2f, 0x39, 0xf7, 0x74, 0xdc, 0xe8,
	0xd8, 0x09, 0xf4, 0x48, 0x66, 0x68, 0x89, 0x67, 0x3a, 0x6c, 0x4d, 0x82, 0x69, 0x2f, 0xbe, 0x01,
	0xf6, 0x86, 0x39, 0x85, 0x07, 0xb5, 0xa1, 0xcf, 0x32, 0x6f, 0xb2, 0xcc, 0x2f, 0x5c, 0x96, 0xb8,
	0xd1, 0x45, 0x19, 0x8c, 0x9a, 0x56, 0x69, 0x8a, 0xa2, 0x3a, 0xc7, 0xff, 0xe4, 0x3a, 0x85, 0xb6,
	0x24, 0xcc, 0x6c, 0xd8, 0x9a, 0x1c, 0x4c, 0xfb, 0xcb, 0xd1, 0xdf, 0x3f, 0xc4, 0x9e, 0x8e, 0x7e,
	0xb4, 0x60, 0x70, 0xc7, 0x82, 0xbd, 0x80, 0xfe, 0x15, 0xdf, 0x5d, 0xf1, 0x84, 0x94, 0x96, 0xc2,
	0x35, 0xec, 0xc5, 0xe0, 0xa0, 0x75, 0x85, 0xb0, 0x57, 0x70, 0xe4, 0x05, 0x9a, 0x1b, 0x92, 0x55,
	0x40, 0x77, 0xf0, 0x76, 0x3c, 0x74, 0xf0, 0xaa, 0x41, 0xd9, 0x5b, 0x08, 0xbd, 0xd0, 0xa0, 0x4e,
	0xa5, 0x70, 0x3b, 0x49, 0x76, 0x5c, 0x90, 0x32, 0x6e, 0x1c, 0xed, 0xf8, 0xb1, 0xe3, 0xe3, 0x1b,
	0xfa, 0x83, 0x63, 0xd9, 0x29, 0x1c, 0xa1, 0x4d, 0x64, 0xbe, 0xc5, 0x32, 0xd1, 0x06, 0x77, 0xb2,
	0x0c, 0x1f, 0xb8, 0x1c, 0x03, 0xb4, 0x1f, 0x2b, 0x74, 0xe5, 0x40, 0x36, 0x85, 0x11, 0xda, 0x64,
	0xab, 0x44, 0x91, 0x61, 0x4e, 0x09, 0x5d, 0x6b, 0x0c, 0xdb, 0x4e, 0x38, 0x44, 0xfb, 0xbe, 0x86,
	0xd7, 0xd7, 0x1a, 0xd9, 0x73, 0xe8, 0x73, 0xad, 0x93, 0x8c, 0x97, 0x09, 0x69, 0x1b, 0x76, 0x5c,
	0xfb, 0x1e, 0xd7, 0xfa, 0x13, 0x2f, 0xd7, 0xda, 0xb2, 0x67, 0x00, 0x15, 0x6f, 0x51, 0x18, 0xa4,
	0xb0, 0xeb, 0x17, 0xc9, 0xb5, 0xbe, 0x70, 0x40, 0xf4, 0x12, 0x06, 0x2b, 0x3f, 0xc0, 0x18, 0x6d,
	0x91, 0x12, 0x3b, 0x86, 0xf6, 0xed, 0xf9, 0xf8, 0x62, 0xf9, 0x33, 0x80, 0xc3, 0x5a, 0x67, 0xd8,
	0x39, 0x74, 0xeb, 0x6f, 0x76, 0x6f, 0xfc, 0xe3, 0x5b, 0x1b, 0xbc, 0x63, 0x1c, 0x0d, 0xbe, 0xfe,
	0xfa, 0xfd, 0xbd, 0xd5, 0x8d, 0x5a, 0x8b, 0xd9, 0x59, 0x30, 0x63, 0x9f, 0xe1, 0x61, 0xcd, 0xbf,
	0xe3, 0x24, 0xbe, 0xb0, 0xf1, 0xfd, 0xcd, 0x37, 0xd7, 0xe4, 0xdf, 0x9e, 0x4f, 0x9d, 0xe7, 0xa3,
	0x68, 0xd8, 0xbc, 0xa0, 0x64, 0x53, 0x99, 0x9d, 0x05, 0xb3, 0x4d, 0xc7, 0x5d, 0xc4, 0x37, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x97, 0x07, 0x2f, 0x6f, 0x62, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProducerClient is the client API for Producer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProducerClient interface {
	Produce(ctx context.Context, in *Timber, opts ...grpc.CallOption) (*ProduceResult, error)
	ProduceBatch(ctx context.Context, in *TimberCollection, opts ...grpc.CallOption) (*ProduceResult, error)
}

type producerClient struct {
	cc *grpc.ClientConn
}

func NewProducerClient(cc *grpc.ClientConn) ProducerClient {
	return &producerClient{cc}
}

func (c *producerClient) Produce(ctx context.Context, in *Timber, opts ...grpc.CallOption) (*ProduceResult, error) {
	out := new(ProduceResult)
	err := c.cc.Invoke(ctx, "/producer.Producer/Produce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerClient) ProduceBatch(ctx context.Context, in *TimberCollection, opts ...grpc.CallOption) (*ProduceResult, error) {
	out := new(ProduceResult)
	err := c.cc.Invoke(ctx, "/producer.Producer/ProduceBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProducerServer is the server API for Producer service.
type ProducerServer interface {
	Produce(context.Context, *Timber) (*ProduceResult, error)
	ProduceBatch(context.Context, *TimberCollection) (*ProduceResult, error)
}

// UnimplementedProducerServer can be embedded to have forward compatible implementations.
type UnimplementedProducerServer struct {
}

func (*UnimplementedProducerServer) Produce(ctx context.Context, req *Timber) (*ProduceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (*UnimplementedProducerServer) ProduceBatch(ctx context.Context, req *TimberCollection) (*ProduceResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceBatch not implemented")
}

func RegisterProducerServer(s *grpc.Server, srv ProducerServer) {
	s.RegisterService(&_Producer_serviceDesc, srv)
}

func _Producer_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/producer.Producer/Produce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServer).Produce(ctx, req.(*Timber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Producer_ProduceBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimberCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServer).ProduceBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/producer.Producer/ProduceBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServer).ProduceBatch(ctx, req.(*TimberCollection))
	}
	return interceptor(ctx, in, info, handler)
}

var _Producer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "producer.Producer",
	HandlerType: (*ProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Produce",
			Handler:    _Producer_Produce_Handler,
		},
		{
			MethodName: "ProduceBatch",
			Handler:    _Producer_ProduceBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/producer.proto",
}
